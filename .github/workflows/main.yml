name: Terradatum RETS Client CI

on:
  push:
    branches:
      - main
    paths:
      - '**/src/**'
      - '**/pom.xml'
      - '.github/workflows/main.yml'
      - 'prepare.sh'
      - 'publish.sh'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: true
          fetch-depth: 0 # required for commit analysis - it needs access to full history
          ref: ${{ github.event.inputs.ref }} # required to build/run on non-default branches from workflow_dispatch events

      ## Setup Java and retrieve the version from the pom.xml file
      - name: Setup Java 15
        uses: actions/setup-java@v1
        with:
          java-version: 15
      - name: Get current version from pom.xml
        uses: terradatum/semver-action@v1
        id: get_version
        with:
          package-manager-type: maven

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic_release
        with:
          semantic_version: 16
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/exec
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump the get_version elements
        env:
          SEMVER_ACTION: ${{ toJSON(steps.get_version.outputs) }}
        run: echo "${SEMVER_ACTION}"

#      - name: If SNAPSHOT, set next-snapshot-version in pom.xml
#        if: success() && ${{ steps.get_version.outputs.snapshot-release = 'true' }}
#        env:
#          NEXT_SNAPSHOT_VERSION: ${{ steps.get_version.outputs.next-snapshot-version }}
#        run: |
#          mvn -B -U -V \
#            -s "${GITHUB_WORKSPACE}"/.github/maven/settings.xml \
#            --file "${GITHUB_WORKSPACE}"/pom.xml \
#            -DgenerateBackupPoms=false \
#            -DnewVersion=${NEXT_SNAPSHOT_VERSION} \
#            versions:set
#      - name: If SNAPSHOT, commmit and push changes
#        if: ${{ steps.get_version.outputs.snapshot-release }}
#        env:
#          NEXT_SNAPSHOT_VERSION: ${{ steps.get_version.outputs.next-snapshot-version }}
#        run: |
#          git config user.email "terradatum-automation@terradatum.com"
#          git config user.name "terradatum-automation"
#          git add .
#          git commit -m "Prepare version ${NEXT_SNAPSHOT_VERSION} [skip ci]"
#          git push --follow-tags
